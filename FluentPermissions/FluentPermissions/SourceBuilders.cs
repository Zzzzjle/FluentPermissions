using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;

namespace FluentPermissions;

internal static class SourceBuilders
{
    public static string BuildModels(Model model)
    {
        var ns = GetRootNamespace(model.Compilation);
        var sb = new StringBuilder();
        sb.AppendLine("// <auto-generated/>");
        sb.AppendLine("#nullable enable");
        sb.AppendLine($"namespace {ns}.Generated;");
        sb.AppendLine();
        sb.AppendLine("internal static class PermissionModels");
        sb.AppendLine("{");
        // Group model
        sb.AppendLine("    internal sealed class PermissionGroupInfo");
        sb.AppendLine("    {");
        sb.AppendLine("        public string Key { get; }");
        sb.AppendLine("        public string LogicalName { get; }");
        sb.AppendLine("        public string? DisplayName { get; }");
        sb.AppendLine("        public string? Description { get; }");
        sb.AppendLine("        public global::System.Collections.Generic.Dictionary<string, object?> Options { get; }");
        sb.AppendLine("        public global::System.Collections.Generic.List<PermissionGroupInfo> Children { get; }");
        sb.AppendLine(
            "        public global::System.Collections.Generic.List<PermissionItemInfo> Permissions { get; }");
        sb.AppendLine("        public string FullName => Key.Replace('.', '_');");
        sb.AppendLine(
            "        public string Icon => Options.TryGetValue(\"Icon\", out var v) ? (v as string) ?? string.Empty : string.Empty;");
        sb.AppendLine(
            "        public int DisplayOrder => Options.TryGetValue(\"DisplayOrder\", out var v) && v is int i ? i : (Options.TryGetValue(\"Order\", out var v2) && v2 is int i2 ? i2 : 0);");
        sb.AppendLine(
            "        public PermissionGroupInfo(string key, string logicalName, string? displayName, string? description,");
        sb.AppendLine("            global::System.Collections.Generic.Dictionary<string, object?> options,");
        sb.AppendLine("            global::System.Collections.Generic.List<PermissionGroupInfo> children,");
        sb.AppendLine("            global::System.Collections.Generic.List<PermissionItemInfo> permissions)");
        sb.AppendLine("        {");
        sb.AppendLine(
            "            Key = key; LogicalName = logicalName; DisplayName = displayName; Description = description;");
        sb.AppendLine("            Options = options; Children = children; Permissions = permissions;");
        sb.AppendLine("        }");
        sb.AppendLine("    }");
        sb.AppendLine();
        // Item model
        sb.AppendLine("    internal sealed class PermissionItemInfo");
        sb.AppendLine("    {");
        sb.AppendLine("        public string Key { get; }");
        sb.AppendLine("        public string LogicalName { get; }");
        sb.AppendLine("        public string? DisplayName { get; }");
        sb.AppendLine("        public string? Description { get; }");
        sb.AppendLine("        public global::System.Collections.Generic.Dictionary<string, object?> Options { get; }");
        sb.AppendLine("        public string GroupKey { get; }");
        sb.AppendLine("        public string FullName => GroupKey.Replace('.', '_') + \"_\" + LogicalName;");
        sb.AppendLine(
            "        public bool IsHighRisk => Options.TryGetValue(\"IsHighRisk\", out var v) && v is bool b && b;");
        sb.AppendLine(
            "        public PermissionItemInfo(string key, string logicalName, string? displayName, string? description,");
        sb.AppendLine(
            "            global::System.Collections.Generic.Dictionary<string, object?> options, string groupKey)");
        sb.AppendLine("        {");
        sb.AppendLine(
            "            Key = key; LogicalName = logicalName; DisplayName = displayName; Description = description; Options = options; GroupKey = groupKey;");
        sb.AppendLine("        }");
        sb.AppendLine("    }");
        sb.AppendLine();
        // Data builder
        sb.AppendLine("    internal static class RegistrarData");
        sb.AppendLine("    {");
        sb.AppendLine("        public static global::System.Collections.Generic.List<PermissionGroupInfo> Build()");
        sb.AppendLine("        {");
        sb.AppendLine("            var roots = new global::System.Collections.Generic.List<PermissionGroupInfo>();");
        foreach (var g in model.RootGroups)
        {
            EmitGroup(sb, g, null, 12, true);
        }

        sb.AppendLine("            return roots;");
        sb.AppendLine("        }");
        sb.AppendLine("    }");
        sb.AppendLine("}");
        return sb.ToString();

        void EmitGroup(StringBuilder esb, GroupDef g, string? parentKey, int indent, bool isRoot)
        {
            var key = parentKey is null ? g.LogicalName : parentKey + "." + g.LogicalName;
            var pad = new string(' ', indent);
            var opts = ToOptionsInit(g.Props);
            esb.AppendLine(pad +
                           $"var {SafeIdent("group_" + key)} = new PermissionGroupInfo(\"{key}\", \"{g.LogicalName}\", {ToNullableLiteral(g.DisplayName)}, {ToNullableLiteral(g.Description)}, {opts}, new global::System.Collections.Generic.List<PermissionGroupInfo>(), new global::System.Collections.Generic.List<PermissionItemInfo>());");
            if (isRoot)
                esb.AppendLine(pad + $"roots.Add({SafeIdent("group_" + key)});");
            else
                esb.AppendLine(pad + $"{SafeIdent("group_" + parentKey!)}.Children.Add({SafeIdent("group_" + key)});");

            foreach (var p in g.Permissions)
            {
                // ReSharper disable once IdentifierTypo
                var popts = ToOptionsInit(p.Props);
                esb.AppendLine(pad +
                               $"{SafeIdent("group_" + key)}.Permissions.Add(new PermissionItemInfo(\"{key}.{p.LogicalName}\", \"{p.LogicalName}\", {ToNullableLiteral(p.DisplayName)}, {ToNullableLiteral(p.Description)}, {popts}, \"{key}\"));");
            }

            foreach (var c in g.Children)
            {
                EmitGroup(esb, c, key, indent, false);
            }
        }
    }

    public static string BuildApp(Model model)
    {
        var ns = GetRootNamespace(model.Compilation);
        var sb = new StringBuilder();
        sb.AppendLine("// <auto-generated/>");
        sb.AppendLine("#nullable enable");
        sb.AppendLine($"namespace {ns}.Generated;");
        sb.AppendLine();
        sb.AppendLine("internal static class AppPermissions");
        sb.AppendLine("{");
        sb.AppendLine(
            "    private static global::System.Collections.Generic.List<PermissionModels.PermissionGroupInfo>? _all;");
        sb.AppendLine(
            "    public static global::System.Collections.Generic.List<PermissionModels.PermissionGroupInfo> GetAllGroups()");
        sb.AppendLine("    {");
        sb.AppendLine("        if (_all == null) _all = PermissionModels.RegistrarData.Build();");
        sb.AppendLine("        return _all;");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine(
            "    public static global::System.Collections.Generic.Dictionary<string, PermissionModels.PermissionGroupInfo> GroupsByKey { get; } = BuildGroupsByKey();");
        sb.AppendLine(
            "    public static global::System.Collections.Generic.Dictionary<string, PermissionModels.PermissionItemInfo> PermsByKey { get; } = BuildPermsByKey();");
        sb.AppendLine();
        sb.AppendLine(
            "    private static global::System.Collections.Generic.Dictionary<string, PermissionModels.PermissionGroupInfo> BuildGroupsByKey()");
        sb.AppendLine("    {");
        sb.AppendLine(
            "        var dict = new global::System.Collections.Generic.Dictionary<string, PermissionModels.PermissionGroupInfo>(global::System.StringComparer.Ordinal);");
        sb.AppendLine("        foreach (var r in GetAllGroups()) AddGroup(r);");
        sb.AppendLine("        return dict;");
        sb.AppendLine();
        sb.AppendLine("        void AddGroup(PermissionModels.PermissionGroupInfo g)");
        sb.AppendLine("        {");
        sb.AppendLine("            dict[g.Key] = g;");
        sb.AppendLine("            foreach (var c in g.Children) AddGroup(c);");
        sb.AppendLine("        }");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine(
            "    private static global::System.Collections.Generic.Dictionary<string, PermissionModels.PermissionItemInfo> BuildPermsByKey()");
        sb.AppendLine("    {");
        sb.AppendLine(
            "        var dict = new global::System.Collections.Generic.Dictionary<string, PermissionModels.PermissionItemInfo>(global::System.StringComparer.Ordinal);");
        sb.AppendLine("        foreach (var r in GetAllGroups()) AddPerms(r);");
        sb.AppendLine("        return dict;");
        sb.AppendLine();
        sb.AppendLine("        void AddPerms(PermissionModels.PermissionGroupInfo g)");
        sb.AppendLine("        {");
        sb.AppendLine("            foreach (var p in g.Permissions) dict[p.Key] = p;");
        sb.AppendLine("            foreach (var c in g.Children) AddPerms(c);");
        sb.AppendLine("        }");
        sb.AppendLine("    }");
        sb.AppendLine();
        // Keys constants
        sb.AppendLine("    internal static class Keys");
        sb.AppendLine("    {");
        foreach (var g in model.RootGroups)
        {
            EmitKeysForGroup(sb, g, null, 8);
        }

        sb.AppendLine("    }");
        sb.AppendLine();
        // Hierarchy
        foreach (var g in model.RootGroups)
        {
            EmitGroupClass(sb, g, null, 4);
        }

        sb.AppendLine("}");
        return sb.ToString();

        void EmitKeysForGroup(StringBuilder esb, GroupDef g, string? parentKey, int indent)
        {
            var key = parentKey is null ? g.LogicalName : parentKey + "." + g.LogicalName;
            var pad = new string(' ', indent);
            var flat = key.Replace('.', '_');
            esb.AppendLine(pad + $"public const string {SafeIdent(flat)} = \"{key}\";");
            foreach (var p in g.Permissions)
                esb.AppendLine(pad +
                               $"public const string {SafeIdent(flat + "_" + p.LogicalName)} = \"{key}.{p.LogicalName}\";");
            foreach (var c in g.Children)
                EmitKeysForGroup(esb, c, key, indent);
        }

        void EmitGroupClass(StringBuilder esb, GroupDef g, string? parentKey, int indent)
        {
            var key = parentKey is null ? g.LogicalName : parentKey + "." + g.LogicalName;
            var pad = new string(' ', indent);
            esb.AppendLine(pad + $"internal static class {SafeIdent(g.LogicalName)}");
            esb.AppendLine(pad + "{");
            esb.AppendLine(pad +
                           $"    public static PermissionModels.PermissionGroupInfo Group => GroupsByKey[\"{key}\"]; ");
            foreach (var p in g.Permissions)
                esb.AppendLine(pad +
                               $"    public static PermissionModels.PermissionItemInfo {SafeIdent(p.LogicalName)} => PermsByKey[\"{key}.{p.LogicalName}\"]; ");
            foreach (var c in g.Children)
                EmitGroupClass(esb, c, key, indent + 4);
            esb.AppendLine(pad + "}");
        }
    }

    private static string ToNullableLiteral(string? s) =>
        s is null ? "null" : "\"" + PermissionSourceGenerator.EscapeString(s) + "\"";

    private static string GetRootNamespace(Compilation compilation)
    {
        var asm = compilation.AssemblyName ?? "FluentPermissions";
        var valid = new string(asm.Where(ch => char.IsLetterOrDigit(ch) || ch == '_' || ch == '.').ToArray());
        if (string.IsNullOrWhiteSpace(valid)) valid = "FluentPermissions";
        return valid;
    }

    private static string SafeIdent(string name)
    {
        var sb = new StringBuilder(name.Length);
        foreach (var ch in name)
            sb.Append(char.IsLetterOrDigit(ch) || ch == '_' ? ch : '_');
        if (sb.Length == 0 || (!char.IsLetter(sb[0]) && sb[0] != '_')) sb.Insert(0, '_');
        return sb.ToString();
    }

    private static string ToOptionsInit(Dictionary<string, ConstValue> props)
    {
        var sb = new StringBuilder();
        sb.Append("new global::System.Collections.Generic.Dictionary<string, object?>()");
        if (props.Count > 0)
        {
            sb.Append(" { ");
            var first = true;
            foreach (var kv in props)
            {
                if (!first) sb.Append(", ");
                first = false;
                sb.Append("{ \"").Append(PermissionSourceGenerator.EscapeString(kv.Key)).Append("\", ");
                sb.Append(kv.Value.ToEmitLiteral());
                sb.Append(" }");
            }

            sb.Append(" }");
        }

        return sb.ToString();
    }
}